<?php

declare(strict_types=1);

namespace Bxmax\Cli\Command\Backup;

use Bitrix\Main\Config\Option;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\ConfirmationQuestion;
use Symfony\Component\Console\Style\SymfonyStyle;

class BackupRestoreCommand extends Command
{
    protected function configure(): void
    {
        $this
            ->setName('backup:restore')
            ->setDescription('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∞–π—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏')
            ->addArgument(
                'archive',
                InputArgument::REQUIRED,
                '–ò–º—è –∞—Ä—Ö–∏–≤–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: backup_20241028.tar.gz)'
            )
            ->addOption(
                'skip-db',
                null,
                InputOption::VALUE_NONE,
                '–ù–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö'
            )
            ->addOption(
                'skip-files',
                null,
                InputOption::VALUE_NONE,
                '–ù–µ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å —Ñ–∞–π–ª—ã'
            )
            ->addOption(
                'force',
                'f',
                InputOption::VALUE_NONE,
                '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é)'
            )
            ->addOption(
                'max-exec-time',
                null,
                InputOption::VALUE_REQUIRED,
                '–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–∞–≥–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 300)',
                '300'
            )
            ->setHelp(
                '–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∞–π—Ç –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏' . PHP_EOL .
                    '‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!' . PHP_EOL . PHP_EOL .
                    '–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:' . PHP_EOL .
                    '  php bitrix.php backup:restore backup_20241028.tar.gz' . PHP_EOL .
                    '  php bitrix.php backup:restore backup.tar.gz --skip-db' . PHP_EOL .
                    '  php bitrix.php backup:restore backup.tar.gz --force'
            );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);

        try {
            if (!defined('DOCUMENT_ROOT')) {
                define('DOCUMENT_ROOT', rtrim(str_replace('\\', '/', $_SERVER['DOCUMENT_ROOT']), '/'));
            }

            if (!defined('BX_ROOT')) {
                define('BX_ROOT', '/bitrix');
            }

            if (!defined('START_EXEC_TIME')) {
                define('START_EXEC_TIME', microtime(true));
            }

            $archiveName = $input->getArgument('archive');
            $skipDb = $input->getOption('skip-db');
            $skipFiles = $input->getOption('skip-files');
            $force = $input->getOption('force');
            $maxExecTime = max((int)$input->getOption('max-exec-time'), 5);

            if ($skipDb && $skipFiles) {
                $io->error('–ù–µ–ª—å–∑—è –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, –∏ —Ñ–∞–π–ª—ã –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ');
                return self::FAILURE;
            }

            $backupDir = DOCUMENT_ROOT . BX_ROOT . '/backup';
            $archivePath = $backupDir . '/' . $archiveName;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
            if (!file_exists($archivePath)) {
                $io->error(sprintf('–ê—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: %s', $archivePath));
                $io->writeln('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É backup:list –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤');
                return self::FAILURE;
            }

            if (!is_readable($archivePath)) {
                $io->error(sprintf('–ê—Ä—Ö–∏–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è: %s', $archivePath));
                return self::FAILURE;
            }

            $io->title('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
            $io->warning([
                '‚ö† –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!',
                '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–æ–∑–¥–∞–ª–∏ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.',
            ]);

            $io->writeln(sprintf('–ê—Ä—Ö–∏–≤: %s', $archiveName));
            $io->writeln(sprintf('–†–∞–∑–º–µ—Ä: %s', \CFile::FormatSize(filesize($archivePath))));
            $io->writeln(sprintf('–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: %s', date('Y-m-d H:i:s', filemtime($archivePath))));
            $io->newLine();

            $operations = [];
            if (!$skipFiles) {
                $operations[] = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤';
            }
            if (!$skipDb) {
                $operations[] = '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö';
            }

            $io->writeln('–ë—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏:');
            $io->listing($operations);

            // –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if (!$force) {
                $helper = $this->getHelper('question');
                $question = new ConfirmationQuestion(
                    '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no) [no]: ',
                    false
                );

                if (!$helper->ask($input, $output, $question)) {
                    $io->writeln('–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                    return self::SUCCESS;
                }
            }

            @set_time_limit(0);
            @ignore_user_abort(true);

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
            if (!function_exists('IntOption')) {
                eval('
                    function IntOption($name, $def = 0) {
                        return \Bitrix\Main\Config\Option::get("main", $name, $def);
                    }
                ');
            }

            if (!function_exists('haveTime')) {
                eval('
                    function haveTime() {
                        return microtime(true) - START_EXEC_TIME < IntOption("dump_max_exec_time", 300);
                    }
                ');
            }

            // –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
            require_once $_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/classes/general/backup.php';
            require_once $_SERVER['DOCUMENT_ROOT'] . '/bitrix/modules/main/classes/general/tar_gz.php';

            global $DB;

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            Option::set('main', 'dump_max_exec_time', $maxExecTime);

            $io->section('–ù–∞—á–∞–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è');

            // –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Ä—Ö–∏–≤–æ–º
            $tar = new \CTar();
            $tar->path = DOCUMENT_ROOT;

            if (!$tar->openRead($archivePath)) {
                throw new \RuntimeException('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∞—Ä—Ö–∏–≤ –¥–ª—è —á—Ç–µ–Ω–∏—è');
            }

            $stepCount = 0;
            $totalSteps = (!$skipFiles ? 1 : 0) + (!$skipDb ? 1 : 0);

            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            if (!$skipFiles) {
                $stepCount++;
                $io->writeln(sprintf('[%d/%d] üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤...', $stepCount, $totalSteps));

                while (true) {
                    $result = $tar->extractFile();
                    
                    if ($result === false) {
                        throw new \RuntimeException('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: ' . implode(', ', $tar->err ?? []));
                    }

                    if ($result === 0) {
                        // –ê—Ä—Ö–∏–≤ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                        break;
                    }

                    // –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω
                    if ($result === true && $tar->header === null && $tar->FileCount % 100 === 0) {
                        $io->write(sprintf("\r   –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d", $tar->FileCount));
                    }
                }

                $io->writeln(sprintf("\r   ‚úì –ò–∑–≤–ª–µ—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: %d", $tar->FileCount));
            }

            $tar->close();

            // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if (!$skipDb) {
                $stepCount++;
                $io->writeln(sprintf('[%d/%d] üì¶ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...', $stepCount, $totalSteps));

                // –ò—â–µ–º SQL —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –±—ç–∫–∞–ø–æ–≤
                $sqlFile = str_replace(['.tar.gz', '.tar'], '.sql', $archivePath);

                if (!file_exists($sqlFile)) {
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ SQL —Ñ–∞–π–ª —Å —Ç–∞–∫–∏–º –∂–µ –ø—Ä–µ—Ñ–∏–∫—Å–æ–º
                    $prefix = str_replace(['.tar.gz', '.tar'], '', basename($archivePath));
                    $foundSql = glob($backupDir . '/' . $prefix . '*.sql');
                    
                    if (!empty($foundSql)) {
                        $sqlFile = $foundSql[0];
                    } else {
                        $io->warning('SQL –¥–∞–º–ø –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î');
                        $io->writeln('–í–æ–∑–º–æ–∂–Ω–æ, –±—ç–∫–∞–ø –±—ã–ª —Å–æ–∑–¥–∞–Ω –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                    }
                }

                if (file_exists($sqlFile) && is_readable($sqlFile)) {
                    $io->writeln('   –ù–∞–π–¥–µ–Ω SQL –¥–∞–º–ø: ' . basename($sqlFile));

                    if ($DB->type !== 'MYSQL') {
                        throw new \RuntimeException('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è MySQL');
                    }

                    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–æ—á–Ω–æ
                    $fp = fopen($sqlFile, 'rb');
                    if (!$fp) {
                        throw new \RuntimeException('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å SQL —Ñ–∞–π–ª –¥–ª—è —á—Ç–µ–Ω–∏—è');
                    }

                    $sqlQuery = '';
                    $lineNumber = 0;
                    $queriesExecuted = 0;

                    $DB->Query('SET FOREIGN_KEY_CHECKS = 0', true);
                    $DB->Query("SET SQL_MODE=''", true);

                    while (!feof($fp)) {
                        if (!haveTime()) {
                            // –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —à–∞–≥–∞
                            usleep(100000); // 0.1 —Å–µ–∫—É–Ω–¥—ã
                        }

                        $line = fgets($fp);
                        $lineNumber++;

                        if ($line === false) {
                            break;
                        }

                        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∏ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                        $line = trim($line);
                        if (empty($line) || str_starts_with($line, '--') || str_starts_with($line, '#')) {
                            continue;
                        }

                        $sqlQuery .= $line . ' ';

                        // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –Ω–∞ ; - –≤—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                        if (str_ends_with(rtrim($line), ';')) {
                            $sqlQuery = trim($sqlQuery);
                            if (!empty($sqlQuery)) {
                                $result = $DB->Query($sqlQuery, true);
                                if (!$result) {
                                    $error = $DB->db_Error ?? 'Unknown error';
                                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
                                    if (!str_contains($error, 'Duplicate entry')) {
                                        fclose($fp);
                                        throw new \RuntimeException(
                                            sprintf('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –Ω–∞ —Å—Ç—Ä–æ–∫–µ %d: %s', $lineNumber, $error)
                                        );
                                    }
                                }
                                $queriesExecuted++;
                                if ($queriesExecuted % 100 === 0) {
                                    $io->write(sprintf("\r   –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d", $queriesExecuted));
                                }
                            }
                            $sqlQuery = '';
                        }
                    }

                    $DB->Query('SET FOREIGN_KEY_CHECKS = 1', true);
                    fclose($fp);

                    $io->writeln('');
                    $io->writeln(sprintf('   ‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: %d)', $queriesExecuted));
                }
            }

            $io->success('–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
            $io->writeln([
                '',
                '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:',
                '  1. –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à: php bitrix.php cache:clear',
                '  2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É —Å–∞–π—Ç–∞',
                '  3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º',
            ]);

            return self::SUCCESS;
        } catch (\Throwable $e) {
            $io->error(sprintf('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –±—ç–∫–∞–ø–∞: %s', $e->getMessage()));
            if ($output->isVerbose()) {
                $io->writeln($e->getTraceAsString());
            }
            return self::FAILURE;
        }
    }
}

