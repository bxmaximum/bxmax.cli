<?php

declare(strict_types=1);

namespace Bxmax\Cli\Command\User;

use Bitrix\Main\ArgumentException;
use Bitrix\Main\ObjectPropertyException;
use Bitrix\Main\SystemException;
use Bitrix\Main\UserTable;
use CUser;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Question\Question;
use Symfony\Component\Console\Style\SymfonyStyle;

class UserPasswordCommand extends Command
{
    protected function configure(): void
    {
        $this->setName('user:password')
            ->setDescription('–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            ->addArgument('login_or_email', InputArgument::OPTIONAL, '–õ–æ–≥–∏–Ω –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            ->addOption('password', 'p', InputOption::VALUE_OPTIONAL, '–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å');
    }

    /**
     * @throws ObjectPropertyException
     * @throws SystemException
     * @throws ArgumentException
     */
    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        $io = new SymfonyStyle($input, $output);
        
        $io->title('–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

        $helper = $this->getHelper('question');
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–∏–Ω–∞/email (—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º)
        $loginOrEmail = $input->getArgument('login_or_email');
        
        if (!$loginOrEmail) {
            $question = new Question('–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ');
            $question->setValidator(function ($answer) {
                if (empty(trim($answer))) {
                    throw new \RuntimeException('–õ–æ–≥–∏–Ω –∏–ª–∏ email –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                }
                return $answer;
            });
            $loginOrEmail = $helper->ask($input, $output, $question);
        }

        // –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–æ–≥–∏–Ω—É –∏–ª–∏ email
        $user = UserTable::getList([
            'filter' => [
                'LOGIC' => 'OR',
                ['=LOGIN' => $loginOrEmail],
                ['=EMAIL' => $loginOrEmail],
            ],
            'select' => ['ID', 'LOGIN', 'EMAIL', 'NAME', 'LAST_NAME'],
            'limit' => 1,
        ])->fetch();

        if (!$user) {
            $io->error(sprintf('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "%s" –Ω–µ –Ω–∞–π–¥–µ–Ω', $loginOrEmail));
            $io->note('–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è –ª–æ–≥–∏–Ω–∞/email –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: php bitrix.php user:list');
            return self::FAILURE;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        $io->section('–ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:');
        $io->definitionList(
            ['ID' => $user['ID']],
            ['–õ–æ–≥–∏–Ω' => $user['LOGIN']],
            ['Email' => $user['EMAIL']],
            ['–ò–º—è' => sprintf('%s %s', $user['NAME'] ?? '', $user['LAST_NAME'] ?? '')]
        );

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–∞—Ä–æ–ª—è (—Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º –∑–∞–ø—Ä–æ—Å–æ–º)
        $newPassword = $input->getOption('password');
        
        if (!$newPassword) {
            if (!$input->isInteractive()) {
                $io->error('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å —á–µ—Ä–µ–∑ –æ–ø—Ü–∏—é --password –≤ –Ω–µ–∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ');
                return self::FAILURE;
            }

            // –ü–µ—Ä–≤—ã–π –≤–≤–æ–¥ –ø–∞—Ä–æ–ª—è
            $question = new Question('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å: ');
            $question->setValidator(function ($answer) {
                if (empty(trim($answer))) {
                    throw new \RuntimeException('–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º');
                }
                if (strlen($answer) < 6) {
                    throw new \RuntimeException('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
                }
                return $answer;
            });
            $question->setHidden(true);
            $question->setHiddenFallback(false);
            $newPassword = $helper->ask($input, $output, $question);

            // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è
            $confirmQuestion = new Question('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ');
            $confirmQuestion->setValidator(function ($answer) use ($newPassword) {
                if ($answer !== $newPassword) {
                    throw new \RuntimeException('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç');
                }
                return $answer;
            });
            $confirmQuestion->setHidden(true);
            $confirmQuestion->setHiddenFallback(false);
            $helper->ask($input, $output, $confirmQuestion);
        }

        // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
        $userObj = new CUser();
        $result = $userObj->Update($user['ID'], [
            'PASSWORD' => $newPassword,
            'CONFIRM_PASSWORD' => $newPassword,
        ]);

        if ($result) {
            $io->success(sprintf(
                '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è %s (ID: %s)',
                $user['LOGIN'],
                $user['ID']
            ));
            
            $io->note([
                'üîí –°—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω',
                'üìù –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –≤ —Å–∏—Å—Ç–µ–º–µ',
                '‚úâÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è'
            ]);
            
            return self::SUCCESS;
        }

        $io->error(sprintf('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è: %s', $userObj->LAST_ERROR));
        
        // –ü–æ–¥—Å–∫–∞–∑–∫–∏ –ø–æ –≤–æ–∑–º–æ–∂–Ω—ã–º –æ—à–∏–±–∫–∞–º
        if (str_contains($userObj->LAST_ERROR, '–ø–∞—Ä–æ–ª—å') || str_contains($userObj->LAST_ERROR, 'password')) {
            $io->warning([
                '–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—à–∏–±–∫–∏:',
                '‚Ä¢ –ü–∞—Ä–æ–ª—å –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–∏—Ç–∏–∫–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                '‚Ä¢ –ü–∞—Ä–æ–ª—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π (–º–∏–Ω–∏–º—É–º 6-8 —Å–∏–º–≤–æ–ª–æ–≤)',
                '‚Ä¢ –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±—É–∫–≤—ã, —Ü–∏—Ñ—Ä—ã –∏–ª–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã',
                '‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏'
            ]);
        }
        
        return self::FAILURE;
    }
}


